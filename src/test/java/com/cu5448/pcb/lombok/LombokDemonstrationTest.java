package com.cu5448.pcb.lombok;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import com.cu5448.pcb.config.PCBProperties;
import com.cu5448.pcb.config.SimulationProperties;
import com.cu5448.pcb.config.StationProperties;
import com.cu5448.pcb.model.TestBoard;

/**
 * Demonstration of Lombok functionality in the PCB simulation
 *
 * <p>This test showcases various Lombok-generated methods and constructor injection benefits
 */
class LombokDemonstrationTest {

    @Test
    void testLombokGeneratedGettersAndSetters() {
        // @Data annotation generates getters and setters for all properties classes
        SimulationProperties simProps = new SimulationProperties();
        simProps.setPcbQuantity(2000);
        assertEquals(2000, simProps.getPcbQuantity());

        StationProperties stationProps = new StationProperties();
        stationProps.setFailureRate(0.001);
        assertEquals(0.001, stationProps.getFailureRate(), 0.0001);

        PCBProperties pcbProps = new PCBProperties();
        PCBProperties.TestBoardDefectRates testRates = pcbProps.getTestboard();
        testRates.setPlaceComponentsDefectRate(0.08);
        assertEquals(0.08, testRates.getPlaceComponentsDefectRate(), 0.0001);
    }

    @Test
    void testLombokGeneratedToString() {
        // @Getter and @ToString annotations generate toString method for PCB
        TestBoard testBoard = new TestBoard();
        String toStringResult = testBoard.toString();

        // Lombok generates toString that includes class name and all fields
        assertTrue(toStringResult.contains("TestBoard"));
        assertTrue(toStringResult.contains("id="));
        assertTrue(toStringResult.contains("type="));
        assertTrue(toStringResult.contains("failed="));

        System.out.println("Lombok-generated toString: " + toStringResult);
    }

    @Test
    void testLombokGeneratedEquals() {
        // @EqualsAndHashCode annotations generate equals and hashCode methods
        PCBProperties.TestBoardDefectRates rates1 = new PCBProperties.TestBoardDefectRates();
        PCBProperties.TestBoardDefectRates rates2 = new PCBProperties.TestBoardDefectRates();

        // Lombok generates equals based on all fields
        assertEquals(rates1, rates2);
        assertEquals(rates1.hashCode(), rates2.hashCode());

        rates1.setPlaceComponentsDefectRate(0.1);
        assertNotEquals(rates1, rates2);
    }

    @Test
    void demonstrateConstructorInjectionBenefit() {
        // Before Lombok: Manual constructor with 4 parameters
        // @Autowired
        // public SimulationController(AssemblyLine assemblyLine,
        // SimulationProperties simulationProperties,
        // PCBFactory pcbFactory,
        // StatisticsService statisticsService) {
        // this.assemblyLine = assemblyLine;
        // this.simulationProperties = simulationProperties;
        // this.pcbFactory = pcbFactory;
        // this.statisticsService = statisticsService;
        // }

        // After Lombok: @RequiredArgsConstructor generates constructor automatically
        // No manual constructor code needed!

        assertTrue(true, "Lombok @RequiredArgsConstructor eliminates boilerplate constructor code");
    }

    @Test
    void demonstrateLombokCodeReduction() {
        // Lombok reduces boilerplate code by approximately 60-80%:

        // Before Lombok (typical class): ~50-80 lines
        // - Manual getters (2-3 lines each)
        // - Manual setters (2-3 lines each)
        // - Manual constructor (3-10 lines)
        // - Manual toString (5-10 lines)
        // - Manual equals/hashCode (10-20 lines)

        // After Lombok: ~10-20 lines
        // - @Data, @RequiredArgsConstructor, @EqualsAndHashCode annotations
        // - Only field declarations and business logic

        PCBProperties.TestBoardDefectRates rates = new PCBProperties.TestBoardDefectRates();

        // All these methods are generated by Lombok @Data annotation:
        assertNotNull(rates.toString()); // Generated toString
        assertEquals(rates, rates); // Generated equals
        assertTrue(rates.hashCode() != 0); // Generated hashCode
        assertNotNull(rates.getPlaceComponentsDefectRate()); // Generated getter

        rates.setPlaceComponentsDefectRate(0.07); // Generated setter
        assertEquals(0.07, rates.getPlaceComponentsDefectRate(), 0.0001);
    }
}
