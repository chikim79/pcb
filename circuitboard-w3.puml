@startuml PCB_Assembly_Simulation_Spring_DI_With_API

!theme plain
skinparam classAttributeIconSize 0
skinparam direction top to bottom
skinparam class {
    BackgroundColor<<RestController>> LightSalmon
    BorderColor<<RestController>> DarkOrange
    BackgroundColor<<BusinessController>> LightGoldenRodYellow
    BorderColor<<BusinessController>> DarkGoldenRod
    BackgroundColor<<Spring>> LightGreen
    BorderColor<<Spring>> DarkGreen
    BackgroundColor<<Pattern>> LightYellow
    BorderColor<<Pattern>> DarkGoldenRod
    BackgroundColor<<Abstract>> LightBlue
    BorderColor<<Abstract>> DarkBlue
    BackgroundColor<<Config>> LightCyan
    BorderColor<<Config>> DarkCyan
    BackgroundColor<<API>> LightPink
    BorderColor<<API>> DarkRed
}

' Main Application Entry Point
class PcbApplication <<Spring>> {
    + main(String[] args): void
    @Bean CommandLineRunner run(controller): CommandLineRunner
}

' API Layer - NEW
package "API Layer" <<API>> {
    class SimulationApiController <<RestController>> {
        - simulationController: SimulationController {final}
        - reportMapper: SimulationReportMapper {final}
        @PostMapping("/run/{pcbType}")
        + runSimulation(pcbType: String, quantity: int): ResponseEntity<String>
        @PostMapping("/run/all")
        + runAllSimulations(quantity: int): ResponseEntity<String>
        @GetMapping("/results/{pcbType}")
        + getSimulationResults(pcbType: String): ResponseEntity<SimulationReportDto>
        @GetMapping("/results/all")
        + getAllSimulationResults(): ResponseEntity<List<SimulationReportDto>>
        @GetMapping("/types")
        + getPcbTypes(): ResponseEntity<List<String>>
        @DeleteMapping("/results")
        + clearAllResults(): ResponseEntity<String>
    }
    
    class SimulationReportDto <<API>> {
        @JsonProperty("pcbType")
        - pcbType: String
        @JsonProperty("pcbsRun")
        - pcbsRun: int
        @JsonProperty("stationFailures")
        - stationFailures: Map<String, Integer>
        @JsonProperty("defectFailures")
        - defectFailures: Map<String, Integer>
        @JsonProperty("totalFailedPcbs")
        - totalFailedPcbs: int
        @JsonProperty("totalPcbsProduced")
        - totalPcbsProduced: int
        @JsonProperty("formattedReport")
        - formattedReport: String
    }
    
    class SimulationReportMapper <<Spring,API>> {
        + toDto(stats: StatisticsCollector, pcbType: String): SimulationReportDto
    }
    
    class CorsConfig <<Spring,Config>> {
        + addCorsMappings(registry: CorsRegistry): void
        + corsConfigurationSource(): CorsConfigurationSource
    }
}

' Top Level - Configuration Layer
package "Configuration Layer" <<Config>> {
    class PCBSimulationConfig <<Spring>> {
        - stationFactory: StationFactory {final}
        @Bean createAssemblyLineStations(): List<Station>
    }
    
    class PCBProperties <<Spring>> {
        @ConfigurationProperties(prefix = "pcb")
        - testboard: DefectRates
        - sensorboard: DefectRates
        - gatewayboard: DefectRates
        + getTestboard(): DefectRates
        + getSensorboard(): DefectRates
        + getGatewayboard(): DefectRates
    }
    
    class StationProperties <<Spring>> {
        @ConfigurationProperties(prefix = "station")
        - failureRate: double
        + getFailureRate(): double
    }
}

' Controller Layer - UPDATED
package "Controller Layer" {
    class SimulationController <<BusinessController>> {
        - assemblyLine: AssemblyLine {final}
        - pcbFactory: PCBFactory {final}
        - simulationResults: Map<String, StatisticsCollector>
        + SimulationController(assemblyLine, pcbFactory)
        + runAllSimulations(): void
        @Async
        + runSimulationAsync(pcbType: String, quantity: int): void
        @Async
        + runAllSimulationsAsync(): void
        + getSimulationResults(pcbType: String): StatisticsCollector
        + getAllSimulationResults(): Map<String, StatisticsCollector>
        + clearAllResults(): void
        - runSimulation(pcbType: String, quantity: int): void
    }
}

' Service Layer
package "Service Layer" {
    class AssemblyLine <<Spring>> {
        - stations: List<Station> {final}
        + AssemblyLine(stations: List<Station>)
        + processPCB(pcb: PCB, stats: StatisticsCollector): void
        + getStations(): List<Station>
    }
    
    class StatisticsCollector {
        - pcbsSubmitted: int
        - defectFailures: Map<String, Integer>
        - stationFailures: Map<String, Integer>
        - completedPCBs: int
        + recordSubmission(): void
        + recordDefectFailure(station: String): void
        + recordStationFailure(station: String): void
        + recordCompletion(): void
        + generateReport(pcbType: String): String
    }
}

' Factory Layer
package "Factory Layer" {
    class PCBFactory <<Spring,Pattern>> {
        - pcbProperties: PCBProperties {final}
        + PCBFactory(pcbProperties: PCBProperties)
        + createPCB(type: String): PCB
    }
    
    class StationFactory <<Spring,Pattern>> {
        - stationProperties: StationProperties {final}
        - stationRegistry: Map<String, Function<Double, Station>> {final}
        + StationFactory(stationProperties: StationProperties)
        + createStation(stationType: String): Station
        + createStation(stationClass: Class<T>): T
    }
}

' Model Layer - PCB Hierarchy
package "PCB Model Layer" {
    class DefectRates {
        @NoArgsConstructor @AllArgsConstructor
        - placeComponentsDefectRate: double
        - opticalInspectionDefectRate: double
        - handSolderingDefectRate: double
        - testDefectRate: double
        + getDefectRate(stationType: String): double
        + noDefects(): DefectRates {static}
    }
    
    abstract class PCB <<Abstract>> {
        - id: String
        - type: String
        - failed: boolean
        - failureReason: String
        + PCB(type: String)
        + getType(): String
        + setFailed(reason: String): void
        + isFailed(): boolean
        + {abstract} getDefectRate(stationType: String): double
        + {abstract} getDefectRates(): DefectRates
    }
    
    class TestBoard {
        - defectRates: DefectRates {final}
        + TestBoard(defectRates: DefectRates)
        + getDefectRate(stationType: String): double
        + getDefectRates(): DefectRates
    }
    
    class SensorBoard {
        - defectRates: DefectRates {final}
        + SensorBoard(defectRates: DefectRates)
        + getDefectRate(stationType: String): double
        + getDefectRates(): DefectRates
    }
    
    class GatewayBoard {
        - defectRates: DefectRates {final}
        + GatewayBoard(defectRates: DefectRates)
        + getDefectRate(stationType: String): double
        + getDefectRates(): DefectRates
    }
}

' Station Model Layer
package "Station Model Layer" {
    abstract class Station <<Abstract>> {
        - name: String {final}
        - stationFailureRate: double {final}
        + Station(name: String, failureRate: double)
        + process(pcb: PCB, stats: StatisticsCollector): void
        + checkStationFailure(): boolean
        # {abstract} performOperation(pcb: PCB, stats: StatisticsCollector): boolean
    }
}

' Station Implementation Layer - Arranged in Two Columns
package "Station Implementations" {
    together {
        class ApplySolderPasteStation {
            + ApplySolderPasteStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
        
        class PlaceComponentsStation {
            + PlaceComponentsStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
        
        class ReflowSolderStation {
            + ReflowSolderStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
        
        class OpticalInspectionStation {
            + OpticalInspectionStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
    }
    
    together {
        class HandSolderingStation {
            + HandSolderingStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
        
        class CleaningStation {
            + CleaningStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
        
        class DepanelizationStation {
            + DepanelizationStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
        
        class TestStation {
            + TestStation(failureRate: double)
            # performOperation(pcb, stats): boolean
        }
    }
}

' Inheritance Relationships
PCB <|-- TestBoard
PCB <|-- SensorBoard
PCB <|-- GatewayBoard

Station <|-- ApplySolderPasteStation
Station <|-- PlaceComponentsStation
Station <|-- ReflowSolderStation
Station <|-- OpticalInspectionStation
Station <|-- HandSolderingStation
Station <|-- CleaningStation
Station <|-- DepanelizationStation
Station <|-- TestStation

' Composition Relationships
TestBoard *-- DefectRates
SensorBoard *-- DefectRates
GatewayBoard *-- DefectRates

' Spring Dependency Injection Flow (Top to Bottom)
PcbApplication ||..|| SimulationController : creates via @Bean

' API Layer Relationships - NEW
SimulationApiController ||--|| SimulationController : constructor injection
SimulationApiController ||--|| SimulationReportMapper : constructor injection
SimulationReportMapper ..> SimulationReportDto : <<creates>>
SimulationReportMapper ..> StatisticsCollector : <<uses>>

SimulationController ||--|| AssemblyLine : constructor injection
SimulationController ||--|| PCBFactory : constructor injection

PCBFactory ||--|| PCBProperties : constructor injection
PCBSimulationConfig ||--|| StationFactory : constructor injection
StationFactory ||--|| StationProperties : constructor injection

AssemblyLine ||--|| Station : List<Station> injected

' Factory Pattern Creation
PCBFactory ..> PCB : <<creates>>
StationFactory ..> Station : <<creates>>

' Configuration Binding
PCBProperties ||..|| DefectRates : @ConfigurationProperties

' Processing Flow
AssemblyLine ..> StatisticsCollector : coordinates
Station ..> StatisticsCollector : updates
Station ..> PCB : processes

' API Notes - NEW
note right of SimulationApiController
**REST API Endpoints:**
@PostMapping("/run/{pcbType}")
@PostMapping("/run/all")
@GetMapping("/results/{pcbType}")
@GetMapping("/results/all")
@GetMapping("/types")
@DeleteMapping("/results")

**CORS:** @CrossOrigin(origins = "http://localhost:3000")
end note

note top of SimulationReportDto
**JSON DTO for API responses**
Maps StatisticsCollector to JSON
with @JsonProperty annotations
end note

' Compact Notes
note top of StationFactory 
Abstract Factory with Registry:
Map<String, Function<Double, Station>>
end note

note top of PCBFactory 
Factory Pattern with
Configuration Injection
end note

note top of PCBProperties 
@ConfigurationProperties
binds application.properties
to DefectRates objects
end note

note right of SimulationController 
**UPDATED:** Added @Async methods
for REST API integration:
- runSimulationAsync()
- runAllSimulationsAsync()
- Store results in Map
end note

note bottom of DefectRates 
Unified Model:
Domain Logic + 
Spring Property Binding
end note

' Compact Legend
note as N1
<b>Spring Boot PCB Simulation with REST API</b>

<color:LightGreen>■</color> Spring Managed Beans
<color:LightYellow>■</color> Design Patterns  
<color:LightCyan>■</color> Configuration
<color:LightBlue>■</color> Abstract Classes
<color:LightPink>■</color> **NEW:** REST API Layer
<color:LightSalmon>■</color> **NEW:** MVC Rest Controllers
<color:LightGoldenRodYellow>■</color> **NEW:** Business Controllers

<b>Key Features:</b>
• Constructor Injection (@RequiredArgsConstructor)
• Configuration Properties (@ConfigurationProperties)
• Abstract Factory Pattern (Registry-based)
• **NEW:** REST API with @RestController
• **NEW:** CORS Configuration for React Client
• **NEW:** Async Processing with @Async
• **NEW:** JSON DTOs with @JsonProperty
end note

@enduml